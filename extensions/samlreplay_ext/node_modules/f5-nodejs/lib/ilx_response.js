/*jshint node:true*/
'use strict';

/**
 * Represents a response object passed to method callback.
 *
 * @constructor
 * @param {string} id - request id
 * @param {object} client - client socket
 */
function ILXResponse(requestId, msgId, ilxServer)
{
    this._requestId = requestId;
    this._msgId = msgId;
    this._ilxServer = ilxServer;
    this._responseSent = false;
}

/**
 * Returns an error to the client.
 *
 * @param {string} message - error message
 * @param {int} [code=30] - error code (optional)
 * @param {any} [data] - additional data (optional)
 */
ILXResponse.prototype.error = function(message, code, data)
{
    if (this._responseSent === true) {
        throw new Error("Response has already been sent");
    }

    this._ilxServer.respond(this._requestId, JSON.stringify({
        jsonrpc: '2.0',
        id: this._msgId,
        error: {
            code: code || 30,
            message: message,
            data: data
        }
    }));

    this._responseSent = true;
};

/**
 * Returns a response to the client.
 *
 * @param {any} result - result
 */
ILXResponse.prototype.reply = function(result)
{
    if (this._responseSent === true) {
        throw new Error("Response has already been sent");
    }

    this._ilxServer.respond(this._requestId, JSON.stringify({
        jsonrpc: '2.0',
        id: this._msgId,
        result: result
    }));

    this._responseSent = true;
};

module.exports = ILXResponse;
