/*jshint node:true*/
'use strict';

/**
 * Represents a request or response transaction object.
 *
 * @constructor
 * @param {object} stream - ILXStream object
 * @param {object} parameters - Request (or response) headers
 * @param {boolean} isResponse - Indicates if the transaction is a client request or server
 *   response.
 */
function ILXTransaction(stream, parameters, isResponse, clientStream)
{
    // request/client or response/server
    this._stream = stream;

    // undefined if this _stream is the clientStream
    this._clientStream = clientStream;

    this.params = parameters;

    if (isResponse) {
        this.respond = undefined; // respond function is only used on client side, for requests
        this.params.closeClient = true;
        this.params.closeServer = true;
    }
}

/**
 * Remove headers from the transaction. It is OK to attempt to remove a header that is not in
 * the transaction. The following items may not be removed: keepalive, method, path, query,
 * status, version and uri. Must be called before any data is written to the stream.
 *
 * @constructor
 * @param {string} headerName - The name of a header to remove from the transaction
 */
ILXTransaction.prototype.removeHeader = function(headerName)
{
    if (!this._stream._handle) {
        throw new Error("stream is not active");
    }
    this._stream._handle.removeHeader(headerName);
};

/**
 * Add or replace a header. The value parameter may be an array of values if you need to send
 * multiple headers with the same name. Must be called before any data is written to the
 * transaction.
 *
 * @constructor
 * @param {string} name - Header name
 * @param {string} value - Header value
 */
ILXTransaction.prototype.setHeader = function(name, value)
{
    if (!this._stream._handle) {
        throw new Error("stream is not active");
    }
    this._stream._handle.setHeader(name, value);
};

/**
 * Indicate the end of the transaction. This must be called after all headers and data have
 * been sent. The transaction will not be sent to the client or server until
 * ILXTransaction.complete is called.
 */
ILXTransaction.prototype.complete = function()
{
    if (!this._stream._handle) {
        throw new Error("stream is not active");
    }
    this._stream._handle.transactionComplete();

    // The default behavior is to close the client and server connections once the server response
    // has been fully processed. This is primarily to make a vip work that has ILX and one-connect
    // or web-accleration profiles. The plugin can override and set closeClient or closeServer
    // to false, in which case the plugin may have to call flow.client.end() or flow.server.end().

    // auto close the client socket?
    if ((this._clientStream !== undefined) && (this.params.closeClient === true)) {
        this._clientStream.end();
    }

    // auto close the server socket?
    if ((this.respond === undefined) && (this.params.closeServer === true)) {
        this._stream.end();
    }
};

/**
 * This can be called after requestStart (or responseStart) and before ILXTransaction.complete.
 * All data received from the client (or server) will be discarded. The plugin can replace the
 * body using ILXFlow.server.write (or ILXFlow.client.write).
 */
ILXTransaction.prototype.replaceBody = function()
{
    if (!this._stream._handle) {
        throw new Error("stream is not active");
    }

    // drain any buffered data
    this._stream.pause();
    while (this._stream.read() !== null);

    this._stream._handle.replaceBody();
};

/** This indicates that the plugin will build an HTTP response to the client. The original
 * HTTP request will not be sent to the server. Any request body not already received will be
 * discarded. Headers may be changed at any point during the request. When the
 * ILXStream#requestComplete event is received the plugin may write the response body (if any).
 * When the response is complete the plugin must call request.complete() which will cause the
 * response to be sent to the client.
 */
ILXTransaction.prototype.respond = function()
{
    if (!this._stream._handle) {
        throw new Error("stream is not active");
    }
    this._stream._handle.respond();
};

module.exports = ILXTransaction;
