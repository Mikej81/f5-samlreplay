/*jshint node:true*/
"use strict";

var ILXLoggerWrap = null;

/**
 * The ILXLogger Class provides F5 implemented commands to quickly send data to log publishers
 *
 * send
 * setFacility
 * getFacility
 * setLevel
 * getLevel
 * setConsoleNewline
 * getConsoleNewline
 * setSanitize
 * getSanitize
 * setTraceLevel
 * valid level values: ALERT, CRIT, DEBUG, EMERG, ERR, INFO, NOTICE, WARNING
 * valid facility values:
 *     AUTO - Will send to a publisher if possible, otherwise console
 *     DISABLED - Send will do nothing
 *     CONSOLE - Will send to console
 *     PUBLISHER - Will send to publisher if possible, otherwise does not output
*/

/*
 * Defaults set here will be used unless overriden in send parameters or changed via set functions.
 *
 * @constructor
 * @param {string} opts.level - @default INFO - optional logging level
 * @param {string} opts.facility - @default AUTO - optional facility
 * @param {boolean} opts.sanitize - @default false - boolean to sanitize input
 * @param {boolean} opts.consoleNewline - @default true - boolean to append newline to console output
 * @param {uint32} opts.traceLevel - @default 0 - trace level to use
 */
function ILXLogger(options)
{
    if (ILXLoggerWrap === null) {
        ILXLoggerWrap = process.binding('ILXLoggerWrap').ILXLoggerWrap;
    }
    options = options || {};
    this._handle = new ILXLoggerWrap(options);
    // user created
    this.f5 = {};
}

/**
 * Send data to a publisher connection
 *
 * @param {string or buffer} data - data to send
 * @param {string} opts.level - optional logging level
 * @param {string} opts.facility - optional facility
 * @param {boolean} opts.sanitize - boolean to sanitize input
 * @param {boolean} opts.consoleNewline - boolean to append newline to console output
 *
 * @throws exception if less than 0 or more than 2 args
 * @return true on success, false on error
 */
ILXLogger.prototype.send = function(data, options)
{
    if (data === undefined) {
        throw new Error("Data must be provided");
    }
    options = options || {};
    return this._handle.send(data, options);
};

/**
 * Set default facility value
 *
 * @param {string} -
 *     valid facility values:
 *         AUTO - Will send to a publisher if possible, otherwise console
 *         DISABLED - Send will do nothing
 *         CONSOLE - Will send to console
 *         PUBLISHER - Will send to publisher if possible, otherwise does not output
 *
 * @throws exception if < 1 || > 1 arg
 * @throws exception if arg not string
 *
 * No return
*/
ILXLogger.prototype.setFacility = function(facility)
{
    if (facility === undefined) {
        throw new Error("Facility must be provided");
    }
    this._handle.setFacility(facility);
};

/**
 * Get default facility value
 *
 * @throws exception if args given
 * @return {string} - AUTO, DISABLED, CONSOLE, PUBLISHER
*/
ILXLogger.prototype.getFacility = function()
{
    return this._handle.getFacility();
};

/**
 * Set default level value
 *
 * @param {string} - ALERT, CRIT, DEBUG, EMERG, ERR, INFO, NOTICE, WARNING
 *
 * @throws exception if less than 1 or more than 1 arg
 * @throws exception if arg not string
 *
 * No return
*/
ILXLogger.prototype.setLevel = function(level)
{
    if (level === undefined) {
        throw new Error("Level must be provided");
    }
    this._handle.setLevel(level);
};

/**
 * Get default level value
 *
 * @throws exception if args given
 * @return {string} - ALERT, CRIT, DEBUG, EMERG, ERR, INFO, NOTICE, WARNING
*/
ILXLogger.prototype.getLevel = function()
{
    return this._handle.getLevel();
};

/**
 * Set sanitize value
 *
 * @param {boolean}
 *
 * @throws exception if less than 1 or more than 1 arg
 * @throws exception if arg not boolean
 * no return
*/
ILXLogger.prototype.setSanitize = function(sanitize)
{
    if (sanitize === undefined) {
        throw new Error("Sanitize must be provided");
    }
    this._handle.setSanitize(sanitize);
};

/**
 * Get sanitize value
 *
 * @throws exception if args given
 * @return {boolean}
*/
ILXLogger.prototype.getSanitize = function()
{
    return this._handle.getSanitize();
};

/**
 * Set consoleNewline
 *
 * @param {boolean}
 *
 * @throws exception if less than 1 or more than 1 arg
 * @throws exception if arg not boolean
 * no return
*/
ILXLogger.prototype.setConsoleNewline = function(newline)
{
    if (newline === undefined) {
        throw new Error("Newline must be provided");
    }
    this._handle.setConsoleNewline(newline);
};

/**
 * Get consoleNewline
 *
 * @throws exception if args given
 * @return {boolean}
*/
ILXLogger.prototype.getConsoleNewline = function()
{
    return this._handle.getConsoleNewline();
};

/**
 * Set traceLevel
 *
 * @param {uint32}
 *
 * @throws exception if less than 1 or more than 1 arg
 * @throws exception if arg not unsigned integer32
 * no return
*/
ILXLogger.prototype.setTraceLevel = function(level)
{
    if (level === undefined) {
        throw new Error("Level must be provided");
    }
    this._handle.setTraceLevel(level);
};

module.exports = ILXLogger;
