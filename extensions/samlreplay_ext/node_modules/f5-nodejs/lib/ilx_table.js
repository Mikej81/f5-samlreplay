/*jshint node:true*/
'use strict';

var events = require('events');
var util = require('util');
var ILXTableWrap = null;

/**
 * The ILXTable class provides access to the session DB in the TMM. The session DB provides
 * storage for key/value pairs that can be shared across connection context and across
 * multiple plugin processes. The interface is very similar to the irule table commands, providing
 * operations to create and query for key/value pairs.  When a table operation completes the
 * 'complete' event will be emitted. The 'complete' event will contain result and status.
 *
 * A single ILXTable object may be used to generate multiple requests, however the response for
 * a request must be received before the next request is sent. Note that a response is not
 * required if the noReply option was specified.
 *
 * See also devcentral.f5.com.
 *
 * @constructor
 * @param {object} flow - An optional ILXFlow object that will be used to set the HA unit
 *   for the session DB entry.
 *
 */
function ILXTable(flow)
{
    events.EventEmitter.call(this);

    if (!ILXTableWrap) {
        ILXTableWrap = process.binding('ILXTableWrap').ILXTableWrap;
    }

    if (flow === undefined) {
        throw new Error("A flow must be provided");
    }

    this._handle = new ILXTableWrap(flow.haUnit);
    this._handle.owner = this;

    this._handle.onIlxResponseDone = ilxTableResultCb;

    this.CmdType = {
        NONE: 0,
        SET: 1,
        ADD: 2,
        REPLACE: 3,
        LOOKUP: 4,
        INCR: 5,
        APPEND: 6,
        DELETE: 7,
        DELETE_ALL: 8,
        SET_TIMEOUT: 9,
        GET_TIMEOUT: 10,
        SET_LIFETIME: 11,
        GET_LIFETIME: 12,
        KEYS: 13
    };
    this._cmd = this.CmdType.NONE;
}
util.inherits(ILXTable, events.EventEmitter);

/**
 * Set a session DB key/value pair.
 *
 * @param {string} key - Key name.
 * @param {string} value - Key value.
 * @param {object} options
 * @param {boolean} options.excl - If excl is true and the key already exists the key will
 *   not be updated and the existing value will be returned. The default value is false.
 * @param {integer} options.lifetime - Number of seconds or ILXTable.INDEFINITE. The default
 *   value is ILXTable.INDEFINITE.
 * @param {boolean} options.mustExist - If mustExist is false (default) then the key will
 *   created if it does not exist. If mustExist is true and the key does not exist then no
 *  change is made to the key/value store. The default value is false.
 * @param {boolean} options.noReply - The TMM will not send a reply to the plugin and the complete
 *   event will not be generated. This also allows the ILXTable object to be used to immediately
 *   send another request to the TMM without waiting for the prior request to complete. The
 *   default value is false.
 * @param {boolean} options.noTouch - Don't update the key's timestamp. The default value is
 *   false.
 * @param {string}  options.subtable - Subtable name. The default value is no subtable.
 * @param {integer} options.timeout - Number of seconds or ILXTable.INDEFINITE. The default
 *   value is 180 seconds.
 * @param {integer} options.traceLevel - Enable debug tracing for this operation. The default
 *   value is 0.
 */
ILXTable.prototype.set = function(key, value, options)
{
    if (key === undefined) {
        throw new Error("A key must be specified");
    }
    if (value === undefined) {
        throw new Error("A value must be specified");
    }
    if (options !== undefined) {
        if (typeof options !== 'object') {
            throw new Error("invalid options object");
        }
        for (var prop in options) {
            if (options.hasOwnProperty(prop)) {
                switch (prop) {
                    case "excl":
                    case "lifetime":
                    case "mustExist":
                    case "noReply":
                    case "noTouch":
                    case "subtable":
                    case "timeout":
                    case "traceLevel":
                        break;
                    default:
                        throw new Error("invalid option: " + prop);
                }
            }
        }
    }
    this._cmd = this.CmdType.SET;
    this._handle.set(key, value, options);
    return this;
};

/**
 * Add a session DB key/value pair. This method is the same as ILXTable.set with the excl
 * option set to true.
 *
 * @param {string} key - Key name.
 * @param {string} value - Key value.
 * @param {object} options
 * @param {integer} options.lifetime - Number of seconds or ILXTable.INDEFINITE. The default
 *   value is ILXTable.INDEFINITE.
 * @param {boolean} options.noReply - The TMM will not send a reply to the plugin and the complete
 *   event will not be generated. This also allows the ILXTable object to be used to immediately
 *   send another request to the TMM without waiting for the prior request to complete. The
 *   default value is false.
 * @param {boolean} options.noTouch - Don't update the key's timestamp. The default value is false.
 * @param {string}  options.subtable - Subtable name. The default is no subtable.
 * @param {integer} options.timeout - Number of seconds or ILXTable.INDEFINITE. The default value
 *   is 180 seconds.
 * @param {integer} options.traceLevel - Enable debug tracing for this operation. The default
 *   value is 0.
 */
ILXTable.prototype.add = function(key, value, options)
{
    if (key === undefined) {
        throw new Error("A key must be specified");
    }
    if (value === undefined) {
        throw new Error("A value must be specified");
    }
    if (options !== undefined) {
        if (typeof options !== 'object') {
            throw new Error("invalid options object");
        }
        for (var prop in options) {
            if (options.hasOwnProperty(prop)) {
                switch (prop) {
                    case "lifetime":
                    case "noReply":
                    case "noTouch":
                    case "subtable":
                    case "timeout":
                    case "traceLevel":
                        break;
                    default:
                        throw new Error("invalid option: " + prop);
                }
            }
        }
    }
    else {
        options = {};
    }

    // add is the same as "set -excl"
    options.excl = true;
    this._cmd = this.CmdType.ADD;

    try {
        this._handle.set(key, value, options);
    }
    finally {
        delete options.excl;
    }

    return this;
};

/**
 * Update a session DB key/value pair. This is the same as ILXTable.set with mustExist enabled.
 *
 * @param {string} key - Key name.
 * @param {string} value - Key value.
 * @param {object} options
 * @param {integer} options.lifetime - Number of seconds or ILXTable.INDEFINITE. The default
 *   value is ILXTable.INDEFINITE.
 * @param {boolean} options.noReply - The TMM will not send a reply to the plugin and the complete
 *   event will not be generated. This also allows the ILXTable object to be used to immediately
 *   send another request to the TMM without waiting for the prior request to complete.
 *   The default value is false.
 * @param {boolean} options.noTouch - Don't update the key's timestamp.  The default value is false.
 * @param {string}  options.subtable - Subtable name. The default is no subtable.
 * @param {integer} options.timeout - Number of seconds or ILXTable.INDEFINITE. The default
 *   value is 180 seconds.
 * @param {integer} options.traceLevel - Enable debug tracing for this operation. The default
 *   value is 0.
 */
ILXTable.prototype.replace = function(key, value, options)
{
    if (key === undefined) {
        throw new Error("A key must be specified");
    }
    if (value === undefined) {
        throw new Error("A value must be specified");
    }
    if (options !== undefined) {
        if (typeof options !== 'object') {
            throw new Error("invalid options object");
        }
        for (var prop in options) {
            if (options.hasOwnProperty(prop)) {
                switch (prop) {
                    case "lifetime":
                    case "noReply":
                    case "noTouch":
                    case "subtable":
                    case "timeout":
                    case "traceLevel":
                        break;
                    default:
                        throw new Error("invalid option: " + prop);
                }
            }
        }
    }
    else {
        options = {};
    }

    options.mustExist = true;
    this._cmd = this.CmdType.REPLACE;

    try {
        this._handle.set(key, value, options);
    }
    finally {
        delete options.mustExist;
    }

    return this;
};

/**
 * Get a session DB key value.
 *
 * @param {string} key - Key name.
 * @param {object} options
 * @param {boolean} options.noTouch - Don't update the key's timestamp. The default value is
 *   false.
 * @param {string}  options.subtable - Subtable name. The default is no subtable.
 * @param {boolean} options.traceLevel - Enable debug tracing for this operation. The default
 *   value is 0.
 */
ILXTable.prototype.lookup = function(key, options)
{
    if (key === undefined) {
        throw new Error("A key must be specified");
    }
    if (options !== undefined) {
        if (typeof options !== 'object') {
            throw new Error("invalid options object");
        }
        for (var prop in options) {
            if (options.hasOwnProperty(prop)) {
                switch (prop) {
                    case "noTouch":
                    case "subtable":
                    case "traceLevel":
                        break;
                    default:
                        throw new Error("invalid option: " + prop);
                }
            }
        }
    }

    this._cmd = this.CmdType.LOOKUP;
    this._handle.lookup(key, options);
    return this;
};

/**
 * Increment a session DB key value.
 *
 * @param {string} key - Key name.
 * @param {object} options
 * @param {integer} options.delta - Increment the value by this amount. The default value is 1.
 * @param {boolean} options.mustExist - If mustExist is false (default) then the key will
 *   created if it does not exist. If mustExist is true and the key does not exist then no
 *   change is made to the key/value store. The default value is false.
 * @param {boolean} options.noReply - The TMM will not send a reply to the plugin and the complete
 *   event will not be generated. This also allows the ILXTable object to be used to immediately
 *   send another request to the TMM without waiting for the prior request to complete.
 *   The default value is false.
 * @param {boolean} options.noTouch - Don't update the key's timestamp.  The default value is false.
 * @param {string}  options.subtable - Subtable name. The default is no subtable.
 * @param {integer} options.traceLevel - Enable debug tracing for this operation. The default
 *   value is 0.
 */
ILXTable.prototype.incr = function(key, options)
{
    if (key === undefined) {
        throw new Error("A key must be specified");
    }
    if (options !== undefined) {
        if (typeof options !== 'object') {
            throw new Error("invalid options object");
        }
        for (var prop in options) {
            if (options.hasOwnProperty(prop)) {
                switch (prop) {
                    case "delta":
                    case "mustExist":
                    case "noReply":
                    case "noTouch":
                    case "subtable":
                    case "traceLevel":
                        break;
                    default:
                        throw new Error("invalid option: " + prop);
                }
            }
        }
    }

    this._cmd = this.CmdType.INCR;
    this._handle.incr(key, options);
    return this;
};

/**
 * Append a string to a session DB key value.
 *
 * @param {string} key - Key name.
 * @param {string} value - Key value.
 * @param {object} options
 * @param {boolean} options.mustExist - If mustExist is false (default) then the key will
 *   created if it does not exist. If mustExist is true and the key does not exist then no
 *   change is made to the key/value store. The default value is false.
 * @param {boolean} options.noReply - The TMM will not send a reply to the plugin and the complete
 *   event will not be generated. This also allows the ILXTable object to be used to immediately
 *   send another request to the TMM without waiting for the prior request to complete. The
 *   default value is false.
 * @param {boolean} options.noTouch - Don't update the key's timestamp. The default value is false.
 * @param {string}  options.subtable - Subtable name. The default is no subtable.
 * @param {boolean} options.traceLevel - Enable tracing for this object. The default value is 0.
 */
ILXTable.prototype.append = function(key, value, options)
{
    if (key === undefined) {
        throw new Error("A key must be specified");
    }
    if (value === undefined) {
        throw new Error("A value must be specified");
    }
    if (options !== undefined) {
        if (typeof options !== 'object') {
            throw new Error("invalid options object");
        }
        for (var prop in options) {
            if (options.hasOwnProperty(prop)) {
                switch (prop) {
                    case "mustExist":
                    case "noReply":
                    case "noTouch":
                    case "subtable":
                    case "traceLevel":
                        break;
                    default:
                        throw new Error("invalid option: " + prop);
                }
            }
        }
    }

    this._cmd = this.CmdType.APPEND;
    this._handle.append(key, value, options);
    return this;
};

/**
 * Delete a session DB key and the associated value.
 *
 * @param {string} key - Key name.
 * @param {object} options
 * @param {boolean} options.noReply - The TMM will not send a reply to the plugin and the complete
 *   event will not be generated. This also allows the ILXTable object to be used to immediately
 *   send another request to the TMM without waiting for the prior request to complete.
 *   The default value is false.
 * @param {string} options.subtable - Subtable name. The default is no subtable.
 * @param {string} options.traceLevel - Enable debug tracing for this operation. The default
 *   value is 0.
 */
ILXTable.prototype.delete = function(key, options)
{
    if (key === undefined) {
        throw new Error("A key must be specified");
    }
    if (options !== undefined) {
        if (typeof options !== 'object') {
            throw new Error("invalid options object");
        }
        for (var prop in options) {
            if (options.hasOwnProperty(prop)) {
                switch (prop) {
                    case "noReply":
                    case "subtable":
                    case "traceLevel":
                        break;
                    default:
                        throw new Error("invalid option: " + prop);
                }
            }
        }
    }

    this._cmd = this.CmdType.DELETE;
    this._handle.delete(key, options);
    return this;
};

/**
 * Delete all key/value pairs in a session DB subtable.
 *
 * @param {string} subtable - Subtable name.
 * @param {object} options
 * @param {boolean} options.noReply - The TMM will not send a reply to the plugin and the complete
 *   event will not be generated. This also allows the ILXTable object to be used to immediately
 *   send another request to the TMM without waiting for the prior request to complete.
 *   The default value is false.
 * @param {string} options.traceLevel - Enable debug tracing for this operation. The default
 *   value is 0.
 */
ILXTable.prototype.deleteAll = function(subtable, options)
{
    if (subtable === undefined) {
        throw new Error("A subtable must be specified");
    }
    if (options !== undefined) {
        if (typeof options !== 'object') {
            throw new Error("invalid options object");
        }
        for (var prop in options) {
            if (options.hasOwnProperty(prop)) {
                switch (prop) {
                    case "noReply":
                    case "traceLevel":
                        break;
                    default:
                        throw new Error("invalid option: " + prop);
                }
            }
        }
    }

    this._cmd = this.CmdType.DELETE_ALL;
    this._handle.deleteAll(subtable, options);
    return this;
};

/**
 * Set a session DB key timeout value.
 *
 * @param {string} key - Key name.
 * @param {integer} value - Timeout value in seconds, or ILXTable.INDEFINITE.
 * @param {object} options
 * @param {boolean} options.noReply - The TMM will not send a reply to the plugin and the complete
 *   event will not be generated. This also allows the ILXTable object to be used to immediately
 *   send another request to the TMM without waiting for the prior request to complete.
 *   The default value is false.
 * @param {string} options.subtable - Subtable name. The default is no subtable.
 * @param {string} options.traceLevel - Enable debug tracing for this operation. The default
 *   value is 0.
 *
 */
ILXTable.prototype.setTimeout = function(key, value, options)
{
    if (key === undefined) {
        throw new Error("A key must be specified");
    }
    if (value === undefined) {
        throw new Error("A timeout must be specified");
    }
    if (options !== undefined) {
        if (typeof options !== 'object') {
            throw new Error("invalid options object");
        }
        for (var prop in options) {
            if (options.hasOwnProperty(prop)) {
                switch (prop) {
                    case "noReply":
                    case "subtable":
                    case "traceLevel":
                        break;
                    default:
                        throw new Error("invalid option: " + prop);
                }
            }
        }
    }

    this._cmd = this.CmdType.SET_TIMEOUT;
    this._handle.setTimeout(key, value, options);
    return this;
};

/**
 * Get a session DB key timeout value.
 *
 * @param {string} key - Key name.
 * @param {object} options
 * @param {boolean} options.remaining - Return the time remaining instead of the timeout.
 *   The default value is false.
 * @param {string}  options.subtable - Subtable name. The default is no subtable.
 * @param {boolean} options.traceLevel - Enable debug tracing for this operation. The default
 *   value is 0.
 */
ILXTable.prototype.getTimeout = function(key, options)
{
    if (key === undefined) {
        throw new Error("A key must be specified");
    }
    if (options !== undefined) {
        if (typeof options !== 'object') {
            throw new Error("invalid options object");
        }
        for (var prop in options) {
            if (options.hasOwnProperty(prop)) {
                switch (prop) {
                    case "remaining":
                    case "subtable":
                    case "traceLevel":
                        break;
                    default:
                        throw new Error("invalid option: " + prop);
                }
            }
        }
    }

    this._cmd = this.CmdType.GET_TIMEOUT;
    this._handle.getTimeout(key, options);
    return this;
};

/**
 * Set a session DB key lifetime value.
 *
 * @param {string} key - Key name.
 * @param {integer} value - Lifetime value in seconds, or ILXTable.INDEFINITE.
 * @param {object} options
 * @param {boolean} options.noReply - The TMM will not send a reply to the plugin and the complete
 *   event will not be generated. This also allows the ILXTable object to be used to immediately
 *   send another request to the TMM without waiting for the prior request to complete.
 *   The default value is false.
 * @param {string}  options.subtable - Subtable name. The default is no subtable.
 * @param {boolean} options.traceLevel - Enable debug tracing for this operation. The default
 *   value is 0.
 */
ILXTable.prototype.setLifetime = function(key, value, options)
{
    if (key === undefined) {
        throw new Error("A key must be specified");
    }
    if (value === undefined) {
        throw new Error("A lifetime must be specified");
    }
    if (options !== undefined) {
        if (typeof options !== 'object') {
            throw new Error("invalid options object");
        }
        for (var prop in options) {
            if (options.hasOwnProperty(prop)) {
                switch (prop) {
                    case "noReply":
                    case "subtable":
                    case "traceLevel":
                        break;
                    default:
                        throw new Error("invalid option: " + prop);
                }
            }
        }
    }

    this._cmd = this.CmdType.SET_LIFETIME;
    this._handle.setLifetime(key, value, options);
    return this;
};

/**
 * Get a session DB key lifetime value.
 *
 * @param {string} key - Key name.
 * @param {object} options
 * @param {boolean} options.remaining - Return the time remaining instead of the lifetime.
 * @param {string}  options.subtable - Subtable name. The default is no subtable.
 * @param {boolean} options.traceLevel - Enable debug tracing for this operation. The default
 *   value is 0.
 */
ILXTable.prototype.getLifetime = function(key, options)
{
    if (key === undefined) {
        throw new Error("A key must be specified");
    }
    if (options !== undefined) {
        if (typeof options !== 'object') {
            throw new Error("invalid options object");
        }
        for (var prop in options) {
            if (options.hasOwnProperty(prop)) {
                switch (prop) {
                    case "remaining":
                    case "subtable":
                    case "traceLevel":
                        break;
                    default:
                        throw new Error("invalid option: " + prop);
                }
            }
        }
    }

    this._cmd = this.CmdType.GET_LIFETIME;
    this._handle.getLifetime(key, options);
    return this;
};

/**
 * Query for the keys in session DB subtable.
 *
 * @param (string) subtable - Subtable name.
 * @param {object}  options
 * @param {boolean} options.count - Return the number of keys instead of all the keys.
 *   The default value is false.
 * @param {boolean} options.noTouch - Don't update the key's timestamp.  The default value is false.
 * @param {integer} options.traceLevel - Enable debug tracing for this operation. The default
 *   value is 0.
 */
ILXTable.prototype.keys = function(subtable, options)
{
    if (subtable === undefined) {
        throw new Error("A subtable must be specified");
    }
    if (options !== undefined) {
        if (typeof options !== 'object') {
            throw new Error("invalid options object");
        }
        for (var prop in options) {
            if (options.hasOwnProperty(prop)) {
                switch (prop) {
                    case "count":
                    case "noTouch":
                    case "traceLevel":
                        break;
                    default:
                        throw new Error("invalid option: " + prop);
                }
            }
        }
        if (options.count && options.noTouch) {
            throw new Error("count and noTouch options are mutually exclusive");
        }
    }

    this._cmd = this.CmdType.KEYS;
    this._handle.keys(subtable, options);
    return this;
};

/**
 * The complete event is emitted when a response from the TMM is received.
 *
 * @fires ILXTable#complete
 */
function ilxTableResultCb(handle, v1, v2)
{
    var self = handle.owner;

    switch (self._cmd) {
        case self.CmdType.SET:
            self.emit('complete', v1, v2);
            break;
        case self.CmdType.ADD:
            self.emit('complete', v1, v2);
            break;
        case self.CmdType.REPLACE:
            self.emit('complete', v1, v2);
            break;
        case self.CmdType.LOOKUP:
            self.emit('complete', v1, v2);
            break;
        case self.CmdType.INCR:
            self.emit('complete', v1, v2);
            break;
        case self.CmdType.APPEND:
            self.emit('complete', v1, v2);
            break;
        case self.CmdType.DELETE:
            self.emit('complete', v1);
            break;
        case self.CmdType.DELETE_ALL:
            self.emit('complete', v1);
            break;
        case self.CmdType.SET_TIMEOUT:
            self.emit('complete', v1, v2);
            break;
        case self.CmdType.GET_TIMEOUT:
            self.emit('complete', v1, v2);
            break;
        case self.CmdType.SET_LIFETIME:
            self.emit('complete', v1, v2);
            break;
        case self.CmdType.GET_LIFETIME:
            self.emit('complete', v1, v2);
            break;
        case self.CmdType.KEYS:
            self.emit('complete', v1, v2);
            break;
        default:
            throw new Error("Invalid command: " + self._cmd);
    }
}

/**
 * Emitted when ILXTable.append completes.
 *
 * @event ILXTable#complete
 * @param {string} value - The resulting key value.
 * @param {integer} status - ILXTable.OK, ILXTable.NOT_FOUND or a system error.
 */

/**
 * Emitted when ILXTable.set completes.
 *
 * @event ILXTable#complete
 * @param {string} value - The resulting key value.
 * @param {integer} status - ILXTable.OK, ILXTable.NOT_FOUND, ILXTable.EXISTS or a system error.
 */

/**
 * Emitted when ILXTable.add completes.
 *
 * @event ILXTable#complete
 * @param {string} value - The resulting key value.
 * @param {integer} status - ILXTable.OK, ILXTable.EXISTS or a system error.
 */

/**
 * Emitted when ILXTable.replace completes.
 *
 * @event ILXTable#complete
 * @param {string} value - The resulting key value.
 * @param {integer} status - ILXTable.OK, ILXTable.NOT_FOUND or a system error.
 */

/**
 * Emitted when ILXTable.lookup completes.
 *
 * @event ILXTable#complete
 * @param {string} value - The value associated with the specified key.
 * @param {integer} status - ILXTable.OK, ILXTable.NOT_FOUND or a system error.
 */

/**
 * Emitted when ILXTable.incr completes.
 *
 * @event ILXTable#complete
 * @param {string} value - The resulting key value.
 * @param {integer} status - ILXTable.OK, ILXTable.NOT_FOUND or a system error.
 */

/**
 * Emitted when ILXTable.delete completes.
 *
 * @event ILXTable#complete
 * @param {integer} status - ILXTable.OK, ILXTable.NOT_FOUND or a system error.
 */

/**
 * Emitted when ILXTable.deleteAll completes.
 *
 * @event ILXTable#complete
 * @param {integer} status - ILXTable.OK, ILXTable.NOT_FOUND or a system error.
 */

/**
 * Emitted when ILXTable.keys completes.
 *
 * @event ILXTable#complete
 * @param {object} value - If the count option was specified the number of keys is returned.
 *   If the count option was not specified an array of keys is returned.
 * @param {integer} status - ILXTable.OK, ILXTable.NOT_FOUND or a system error.
 */

/**
 * Emitted when ILXTable.setTimeout completes.
 *
 * @event ILXTable#complete
 * @param {string} value - The new timeout value.
 * @param {integer} status - ILXTable.OK, ILXTable.NOT_FOUND or a system error.
 */

/**
 * Emitted when ILXTable.getTimeout completes.
 *
 * @event ILXTable#complete
 * @param {string} value - Timeout or time remaining.
 * @param {integer} status - ILXTable.OK, ILXTable.NOT_FOUND or a system error.
 */

/**
 * Emitted when ILXTable.setLifetime completes.
 *
 * @event ILXTable#complete
 * @param {string} value - The new lifetime value.
 * @param {integer} status - ILXTable.OK, ILXTable.NOT_FOUND or a system error.
 */

/**
 * Emitted when ILXTable.getLifetime completes.
 *
 * @event ILXTable#complete
 * @param {string} value - Lifetime or lifetime remaining.
 * @param {integer} status - ILXTable.OK, ILXTable.NOT_FOUND or a system error.
 * @memberof ILXTable
 */

module.exports = ILXTable;

/**
 * The action was successful.
 *
 * @constant
 * @type {integer}
 * @memberof ILXTable
 */
module.exports.OK = 0;

/**
 * An attempt was made to create a key that already exists.
 *
 * @constant
 * @type {integer}
 * @memberof ILXTable
 */
module.exports.EXISTS = -1;

/**
 * A key or subtable was not found.
 *
 * @constant
 * @type {integer}
 * @memberof ILXTable
 */
module.exports.NOT_FOUND = -2;

/**
 * Used to specify a key's timeout or lifetime such that it will not expire.
 *
 * @constant
 * @type {integer}
 * @memberof ILXTable
 */
module.exports.INDEFINITE = 0xFFFFFFFF;

