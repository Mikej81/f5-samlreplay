/*jshint node:true*/
'use strict';

var util = require("util");

/**
 * A singleton object that manages a set of address and port mappings to ILXPluginServer
 * listeners. When new lows from the tmm arrive the ILXPlugin class ILXPluginListeners.get() will
 * be called to see if the flow should be routed to a listener that has been registered here.
 */
var ILXPluginListeners = function () {

    // the set of listeners, private
    var _ilx_listeners = undefined;

    // public functions
    var self = {

        /**
         * Register an ILXPluginServer object to listen on an address:port. Address and port
         * are optional and will be wildcarded if not present.
         */
        add: function(listener, options) {

            if (_ilx_listeners === undefined) {
                // create an object that inherits no properties
                _ilx_listeners = Object.create(null);
            }

            // save the host/address and port values in the listener
            if (options === undefined) {
                listener._address = "::";
                listener._port = "*";
            }
            else {
                if (options.host === undefined) {
                    listener._address = "::";
                }
                else {
                    listener._address = options.host;
                }
                if (options.port === undefined) {
                    listener._port = "*";
                }
                else {
                    listener._port = options.port.toString();
                }
            }

            var key = listener._address + ":" + listener._port;

            var err;
            if (_ilx_listeners[key] === undefined) {
                listener._listenerKey = key;
                _ilx_listeners[key] = listener;
            }
            else {
                err = "Can't bind address " + key + " EADDRINUSE";
            }

            return err;
        },

        /**
         * Remove an ILXPluginServer listener. The listener will no longer receive new connections.
         */
        remove: function(listener) {
            delete _ilx_listeners[listener._listenerKey];
        },

        /**
         * ILXPlugin calls this to see if a new flow matches a listener. If a listener is found
         * the flow will be passed to the listener.
         */
        get: function(host, port) {

            // this is called internally when a new flow is being created

            if (_ilx_listeners === undefined) {
                return undefined;
            }

            // look for a match on options.host and options.port first, then the precedence is
            // addr:port, addr:*, *:port, *:*

            // look for a specific match
            var portStr = port.toString();
            var listener = _ilx_listeners[host + ":" + portStr];
            if (listener === undefined) {
                // try addr:*
                listener = _ilx_listeners[host + ":*"];
                if (listener === undefined) {
                    // try *:port
                    listener = _ilx_listeners[":::" + portStr];
                    if (listener === undefined) {
                        // try *:*
                        listener = _ilx_listeners[":::*"];
                    }
                }
            }

            return listener;
        },
    };

    return self;

}();

module.exports = ILXPluginListeners;
