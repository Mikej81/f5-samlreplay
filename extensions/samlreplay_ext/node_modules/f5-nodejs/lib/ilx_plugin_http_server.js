/*jshint node:true*/
'use strict';

var events = require('events');
var util = require('util');
var http = require('http');
var ilxPluginServer = require('./ilx_plugin_server');

/**
 * The ILXPluginHttpServer class is similar in behavior to the node http.Server class.
 *
 * @constructor
 * @param {object} requestListener - The requestListener is intended to be compatible with
 *   requestListener that is passed to the node http.createServer(requestListener) class. An
 *   express.js app object (var app = express();) will also work as a request listener.
 */
function ILXPluginHttpServer(requestListener)
{
    if (requestListener === undefined) {
        throw new Error("A request listener must be provided");
    }
    this.addListener('request', requestListener);

    ilxPluginServer.call(this);
}
util.inherits(ILXPluginHttpServer, ilxPluginServer);

/**
 * New connections are routed to the native node HTTP listener
 */
ILXPluginHttpServer.prototype._httpConnection = http._connectionListener;

/**
 * Override the base newFlow function. flow.client is passed to the node http connection
 * listener, which will then invoke the requestListener registered in the constructor.
 *
 * @param {object} flow - ILXFlow associated with the new client connection.
 */
ILXPluginHttpServer.prototype.newFlow = function(flow)
{
    var self = this;

    if (this._disableServer === true) {
        flow.server.end();
    }

    // Handle all flow errors and propagate to the server if the plugin has not defined
    // handlers for flow, client or server
    flow.on("error", function(err) {
        if (flow.listeners("error").length === 1) {
            var msg = "flow error, " + err;
            self.emit("error", msg);
        }
    });
    flow.client.on("error", function(err) {
        // Note that the event is clientError, see node.js HTTP server docs, forward to the server.
        var msg = "client socket error, " + err;
        self.emit("clientError", msg, flow.client);
    });
    flow.server.on("error", function(err) {
        if (flow.server.listeners("error").length === 1) {
            var msg = "server socket error, " + err;
            self.emit("error", msg);
        }
    });

    // node makes the callback and then emits the connection event, in that order
    this._httpConnection(flow.client);
    this.emit('connection', flow.client);
}

module.exports = ILXPluginHttpServer;
